const fs = require('fs');
const _ = require('lodash'); // eslint-disable-line lodash/import-scope
const absolutePath = process.cwd(); // icons package root
const { getDirectories, getIconDictionary } = require('./utils');

const directories = getDirectories();

const { allIcons, iconDictionary } = getIconDictionary(directories);

const toPascalCase = (someString) => _.startCase(_.camelCase(someString));

// assuming `fileName` lacks `.svg` suffix and assuming `relativePath`
const generateTemplatesForFile = (fileName, relativePath) => {
  const pascalFileName = toPascalCase(fileName).replace(/ /g, '');
  const alias = `_${pascalFileName}`;
  const importLine = `\nimport ${alias} from '${relativePath}${fileName}.svg';`;
  const typeMapLine = `\nexport const ${pascalFileName} = React.forwardRef<SVGSVGElement, SVGProps<SVGSVGElement>>((props, ref) => <${alias} {...props} ref={ref} />); ${pascalFileName}.displayName = '${pascalFileName}';`;

  return { importLine, typeMapLine };
};

// top of the file
let importLines = [
  '// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT MODIFY IT.\n',
  "import React, { SVGProps } from 'react';\n",
];
let typeMapLines = [];

/**
 * Creates two statements per icon and stores them in the appropriate array
 * Afterwards, they are combined into one array that is written as a file
 */
for (const allIcon of allIcons) {
  let iconPath = '';
  //grabs correct path for Icon
  for (const directory of directories) {
    if (iconDictionary[directory].includes(allIcon)) {
      iconPath = './svgs/' + directory + '/';
    }
  }
  const [iconFileName] = allIcon.split('.');
  const { importLine, typeMapLine } = generateTemplatesForFile(iconFileName, iconPath);

  importLines.push(importLine);
  typeMapLines.push(typeMapLine);
}

importLines.push('\n');
typeMapLines.push('\n');

const combinedLineArrays = [...importLines, ...typeMapLines];

//Files is written/overwritten
const writeStream = fs.createWriteStream(`${absolutePath}/src/index.tsx`);
// write each value of the array on the file breaking line
combinedLineArrays.forEach((value) => writeStream.write(`${value}`));
writeStream.end();
